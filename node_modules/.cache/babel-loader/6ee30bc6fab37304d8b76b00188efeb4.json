{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\source\\\\repos\\\\DGS-web\\\\src\\\\components\\\\Login\\\\CustomInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport styles from \"./assets/jss/customInputStyle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success,\n    handleChange,\n    type\n  } = props;\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...formControlProps,\n    className: formControlClasses,\n    children: [labelText !== undefined ? /*#__PURE__*/_jsxDEV(InputLabel, {\n      className: classes.labelRoot + \" \" + labelClasses,\n      htmlFor: id,\n      ...labelProps,\n      children: labelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(Input, {\n      classes: {\n        input: inputClasses,\n        root: marginTop,\n        disabled: classes.disabled,\n        underline: underlineClasses\n      },\n      id: id,\n      onChange: handleChange,\n      ...inputProps,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomInput, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomInput;\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/Users/Daniel/source/repos/DGS-web/src/components/Login/CustomInput.jsx"],"names":["React","PropTypes","classNames","makeStyles","FormControl","InputLabel","Input","styles","useStyles","CustomInput","props","classes","formControlProps","labelText","id","labelProps","inputProps","error","white","inputRootCustomClasses","success","handleChange","type","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","whiteUnderline","marginTop","undefined","inputClasses","input","whiteInput","formControlClasses","className","formControl","labelRoot","root","disabled","propTypes","node","object","string","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classNames from \"classnames\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport styles from \"./assets/jss/customInputStyle.js\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CustomInput(props) {\r\n  const classes = useStyles();\r\n  const {\r\n    formControlProps,\r\n    labelText,\r\n    id,\r\n    labelProps,\r\n    inputProps,\r\n    error,\r\n    white,\r\n    inputRootCustomClasses,\r\n    success,\r\n    handleChange,\r\n    type\r\n  } = props;\r\n\r\n  const labelClasses = classNames({\r\n    [\" \" + classes.labelRootError]: error,\r\n    [\" \" + classes.labelRootSuccess]: success && !error\r\n  });\r\n  const underlineClasses = classNames({\r\n    [classes.underlineError]: error,\r\n    [classes.underlineSuccess]: success && !error,\r\n    [classes.underline]: true,\r\n    [classes.whiteUnderline]: white\r\n  });\r\n  const marginTop = classNames({\r\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\r\n  });\r\n  const inputClasses = classNames({\r\n    [classes.input]: true,\r\n    [classes.whiteInput]: white\r\n  });\r\n  var formControlClasses;\r\n  if (formControlProps !== undefined) {\r\n    formControlClasses = classNames(\r\n      formControlProps.className,\r\n      classes.formControl\r\n    );\r\n  } else {\r\n    formControlClasses = classes.formControl;\r\n  }\r\n  return (\r\n    <FormControl {...formControlProps} className={formControlClasses}>\r\n      {labelText !== undefined ? (\r\n        <InputLabel\r\n          className={classes.labelRoot + \" \" + labelClasses}\r\n          htmlFor={id}\r\n          {...labelProps}\r\n        >\r\n          {labelText}\r\n        </InputLabel>\r\n      ) : null}\r\n      <Input\r\n        classes={{\r\n          input: inputClasses,\r\n          root: marginTop,\r\n          disabled: classes.disabled,\r\n          underline: underlineClasses\r\n        }}\r\n        id={id}\r\n        onChange={handleChange}\r\n        {...inputProps}\r\n        type={type}\r\n      />\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nCustomInput.propTypes = {\r\n  labelText: PropTypes.node,\r\n  labelProps: PropTypes.object,\r\n  id: PropTypes.string,\r\n  inputProps: PropTypes.object,\r\n  formControlProps: PropTypes.object,\r\n  inputRootCustomClasses: PropTypes.string,\r\n  error: PropTypes.bool,\r\n  success: PropTypes.bool,\r\n  white: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}