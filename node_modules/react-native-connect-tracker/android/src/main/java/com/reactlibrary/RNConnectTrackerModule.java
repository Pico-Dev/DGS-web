
package com.reactlibrary;

import android.util.Pair;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.connectedinteractive.connectsdk.ConnectTracker;
import com.connectedinteractive.connectsdk.ConnectTrackerEvent;
import com.connectedinteractive.connectsdk.ConnectTrackerOptions;
import com.connectedinteractive.connectsdk.ConnectTrackerCallback;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

public class RNConnectTrackerModule extends ReactContextBaseJavaModule {

  private final ReactApplicationContext reactContext;

  public RNConnectTrackerModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  @Override
  public String getName() {
    return "RNConnectTracker";
  }

  @ReactMethod
  public void init(String appKey, boolean useCallbacks) {
      ConnectTrackerOptions connectTrackerOptions = new ConnectTrackerOptions();
      connectTrackerOptions.setContext(getReactApplicationContext());
      connectTrackerOptions.setAppKey(appKey);

      if (useCallbacks) {
          connectTrackerOptions.setConnectTrackerCallback(new ConnectTrackerCallback() {
            @Override
            public void onWillTrackEvent(ConnectTrackerEvent connectTrackerEvent) {
              sendCallback("CI_ON_WILL_TRACK_EVENT", connectTrackerEvent);
            }

            @Override
            public void onEventTracked(ConnectTrackerEvent connectTrackerEvent) {
              sendCallback("CI_ON_EVENT_TRACKED", connectTrackerEvent);
            }

            @Override
            public void onEventTrackFailed(ConnectTrackerEvent connectTrackerEvent) {
              sendCallback("CI_ON_EVENT_TRACK_FAILED", connectTrackerEvent);
            }
          });
      }
      ConnectTracker.init(connectTrackerOptions);
  }

  private void sendCallback(String javascriptEventName, ConnectTrackerEvent connectTrackerEvent) {
      try {
          WritableArray array = convertEventToWritableArray(connectTrackerEvent);
          reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(javascriptEventName, array);
      } catch (Exception e) {

      }
  }

  private WritableArray convertEventToWritableArray(ConnectTrackerEvent connectTrackerEvent) {
      WritableMap writableMap = Arguments.createMap();
      writableMap.putString("name", connectTrackerEvent.getName());

      if (connectTrackerEvent.getValue() != null && connectTrackerEvent.getValue().length() > 0) {
          writableMap.putString("value", connectTrackerEvent.getValue());
      }

      writableMap.putString("trackingId", connectTrackerEvent.getTrackingId());
      writableMap.putString("sdkVersion", connectTrackerEvent.getSdkVersion());
      writableMap.putString("impressionId", connectTrackerEvent.getImpressionId());
      writableMap.putString("advertisingId", connectTrackerEvent.getAdvertisingId());
      writableMap.putString("timestamp", String.valueOf(connectTrackerEvent.getTimestamp()));

      WritableArray array = Arguments.createArray();
      array.pushMap(writableMap);

      return array;
  }

  @ReactMethod
  public void initWithLocationServices() {
    ConnectTracker.initWithLocationServices(getReactApplicationContext());
  }

  @ReactMethod
  public void initWithLocationServicesSandbox() {
    ConnectTracker.initWithLocationServices(getReactApplicationContext(), true);
  }

  @ReactMethod
  public void initBaseUrl(String BaseUrl) {
    ConnectTracker.init(getReactApplicationContext(), BaseUrl);
  }

  @ReactMethod
  public void initSandbox() {
    ConnectTracker.init(getReactApplicationContext(), true);
  }

  @ReactMethod
  public void onLocationPermissionGranted() {
    ConnectTracker.onLocationPermissionGranted();
  }

  @ReactMethod
  public void onLocationPermissionDenied() {
    ConnectTracker.onLocationPermissionDenied();
  }

  @ReactMethod
  public void onWillRequestLocationPermission() {
    ConnectTracker.onWillRequestLocationPermission();
  }

  @ReactMethod
  public void componentWillUnmount() {
    ConnectTracker.onStop();
  }

  @ReactMethod
  public void initPushNotifications() {
    ConnectTracker.initPushNotifications();
  }

  //setNotification?
  //getNotification?

  @ReactMethod
  public void trackEventWithValueAndParams(String event, String value, String param1, String param2) {
    ConnectTracker.trackEvent(event, value, new Pair<>(param1, param2));
  }

  @ReactMethod
  public void trackEventWithValue(String event, String value) {
    ConnectTracker.trackEvent(event, value);
  }

  @ReactMethod
  public void trackEvent(String event) {
    ConnectTracker.trackEvent(event);
  }
}
